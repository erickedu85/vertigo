/* Generated By:JavaCC: Do not edit this line. AmberParserConstants.java */
package sumgra.queryparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AmberParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WS = 6;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int SELECT = 8;
  /** RegularExpression Id. */
  int VAR = 9;
  /** RegularExpression Id. */
  int WHERE = 10;
  /** RegularExpression Id. */
  int PN_CHARS_BASE = 11;
  /** RegularExpression Id. */
  int PN_CHARS_U = 12;
  /** RegularExpression Id. */
  int PN_CHARS = 13;
  /** RegularExpression Id. */
  int PN_PREFIX = 14;
  /** RegularExpression Id. */
  int PN_LOCAL = 15;
  /** RegularExpression Id. */
  int VARNAME = 16;
  /** RegularExpression Id. */
  int WORD = 17;
  /** RegularExpression Id. */
  int URI = 18;
  /** RegularExpression Id. */
  int LITERAL = 19;
  /** RegularExpression Id. */
  int DIGITS = 20;
  /** RegularExpression Id. */
  int INTEGER = 21;
  /** RegularExpression Id. */
  int DECIMAL = 22;
  /** RegularExpression Id. */
  int DOUBLE = 23;
  /** RegularExpression Id. */
  int EXPONENT = 24;
  /** RegularExpression Id. */
  int QUOTE_3D = 25;
  /** RegularExpression Id. */
  int QUOTE_3S = 26;
  /** RegularExpression Id. */
  int ECHAR = 27;
  /** RegularExpression Id. */
  int STRING_LITERAL1 = 28;
  /** RegularExpression Id. */
  int STRING_LITERAL2 = 29;
  /** RegularExpression Id. */
  int STRING_LITERAL_LONG1 = 30;
  /** RegularExpression Id. */
  int STRING_LITERAL_LONG2 = 31;
  /** RegularExpression Id. */
  int LPAREN = 32;
  /** RegularExpression Id. */
  int RPAREN = 33;
  /** RegularExpression Id. */
  int NIL = 34;
  /** RegularExpression Id. */
  int LBRACE = 35;
  /** RegularExpression Id. */
  int RBRACE = 36;
  /** RegularExpression Id. */
  int LBRACKET = 37;
  /** RegularExpression Id. */
  int RBRACKET = 38;
  /** RegularExpression Id. */
  int ANON = 39;
  /** RegularExpression Id. */
  int SEMICOLON = 40;
  /** RegularExpression Id. */
  int COMMA = 41;
  /** RegularExpression Id. */
  int DOT = 42;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<WS>",
    "<SINGLE_LINE_COMMENT>",
    "\"select\"",
    "<VAR>",
    "\"where\"",
    "<PN_CHARS_BASE>",
    "<PN_CHARS_U>",
    "<PN_CHARS>",
    "<PN_PREFIX>",
    "<PN_LOCAL>",
    "<VARNAME>",
    "<WORD>",
    "<URI>",
    "<LITERAL>",
    "<DIGITS>",
    "<INTEGER>",
    "<DECIMAL>",
    "<DOUBLE>",
    "<EXPONENT>",
    "\"\\\"\\\"\\\"\"",
    "\"\\\'\\\'\\\'\"",
    "<ECHAR>",
    "<STRING_LITERAL1>",
    "<STRING_LITERAL2>",
    "<STRING_LITERAL_LONG1>",
    "<STRING_LITERAL_LONG2>",
    "\"(\"",
    "\")\"",
    "<NIL>",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "<ANON>",
    "\";\"",
    "\",\"",
    "\".\"",
  };

}
