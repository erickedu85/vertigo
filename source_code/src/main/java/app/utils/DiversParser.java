package app.utils;

import app.graph.structure.Edge;
import app.graph.structure.Graph;
import app.graph.structure.Multiedge;
import app.graph.structure.Vertex;
import app.gui.main.Constants;
import javafx.geometry.VPos;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;
import javafx.scene.text.TextAlignment;

public class DiversParser {

	
	/**
	 * Method to save the list of names of vertex in a TXT format
	 * 
	 * @param g
	 *            Graph
	 * @param out
	 *            path to save the Graph g
	 */
	public static void saveVertexNamesTXT(Graph g, String pathName) {
		Out out = new Out(pathName);
		for (Vertex vertex : g.getListNode()){
			out.print(vertex.getEtiqueta().getText());
			out.println();
		}
		out.close();
	}
	
	/**
	 * Method to save the list of multiedge in a TXT format
	 * 
	 * @param g
	 *            Graph
	 * @param out
	 *            path to save the Graph g
	 */
	public static void saveMultiEdgesTXT(Graph g, String pathName) {
		Out out = new Out(pathName);
		writeTXT(g, out);
	}

	/**
	 * Method to save the graph in a TXT format
	 * 
	 * @param g
	 *            Graph
	 * @param out
	 *            path to save the Graph g
	 */
	public static void writeTXT(Graph g, Out out) {

//		out.println("1 0 1,2");
//		out.println("1 2 0");
//		out.close();
		
		//		for (Multiedge multiedge : g.getListMultiedge().toSortedList(Constants.MULTIEDGE_ID_COMPARATOR)) {
		for (Multiedge multiedge : g.getListMultiedge()) {
			out.print(multiedge.getIdSource());
			out.print(" ");
			out.print(multiedge.getIdTarget());
			out.print(" ");
			int i=0;
			
			for (Edge edge : multiedge.getListEdge()) {
				out.print(edge.getType().getId());
				if ((i + 1) < multiedge.getListEdge().size()) {
					out.print(",");
					i++;
				}
			}
			out.println();
		}
		out.close();
	}

	/**
	 * Save a Graph to pathName
	 * 
	 * @param g
	 *            Graph to save
	 * @param pathName
	 *            PathName to save
	 */
	public static void saveGML(Graph g, String pathName) {
		Out out = new Out(pathName);
		writeGML(g, out);
	}

	/**
	 * Load a Graph from a pathName
	 * 
	 * @param pathName
	 *            PathName
	 */
	public static Graph loadGML(String pathName) {
		In in = new In(pathName);
		Graph graphTemp = new Graph(in);
		in.close();
		return graphTemp;
	}

	/**
	 * 
	 * Method to write a graph in GML format
	 * 
	 * @param g
	 *            graph
	 * @param pathName
	 *            path to save GML format
	 */
	public static void writeGML(Graph g, Out out) {
		out.println("Creator \"Graphes::Utils::GMLParser\"");
		out.println("graph [");
		out.println("  comment \"This is a graph generated by Graphes\"");
		for (Vertex node : g.getListNode()) {
			out.println("  node [");
			out.println("    id " + node.getId());
			out.println("    label \"" + node.getEtiqueta().getText() + "\"");
			out.println("    weight " + node.getType().getId());
			out.println("    graphics [");
			out.println("	   x " + node.getPosition().getX1());
			out.println("	   y " + node.getPosition().getY1());
			out.println("	   w " + node.getRadius());
			out.println("	   h " + node.getRadius());
			out.println("	   type \"rectangle\"");
			out.println("    ]");
			out.println("  ]");
		}

		for (Multiedge multiedge : g.getListMultiedge()) {
			for (Edge edge : multiedge.getListEdge()) {
				out.println("  edge [ ");
				out.println("    id " + edge.getId());
				out.println("    source " + edge.getIdSource());
				out.println("    target " + edge.getIdTarget());
				out.println("    label \"" + edge.getEtiqueta().getText() + "\"");
				out.println("    subgraph " + edge.getType().getId());
				out.println("    graphics [");
				out.println("	   arrow \"last\"");
				out.println("    ]");
				out.println("  ]");
			}
		}
		out.println("]");
		out.close();
	}

}
